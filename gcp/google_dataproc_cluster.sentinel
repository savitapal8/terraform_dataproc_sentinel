# This policy uses the Sentinel tfplan/v2 import to require that
# all GCE dataproc instances following all the policies

# Note that the comparison is case-sensitive.

import "strings"
import "types"
import "tfplan-functions" as plan

# Get all GCE dataproc instances
allDPInstances = plan.find_resources("google_dataproc_cluster")

# Filter to GCE dataproc instances with violations
# Warnings will be printed for all violations since the last parameter is true

key = ""
messages = {}
messages_http = {}
messages_ip_internal = {}
messages_sa = {}
default_compute_sa = "compute@developer.gserviceaccount.com"
selected_node = null

for allDPInstances as address, rc {
	messages[address] = []
	
	//*******************validating cluster_config node*****************************************
	key = "cluster_config"

	selected_node = plan.evaluate_attribute(rc, key)
	
	if types.type_of(selected_node) is "null" {
		message = plan.to_string(address) + " does not have "+ key +" defined"
		messages_http[address] = []
		messages_ip_internal[address] = []
		messages_sa[address] = []
		append(messages_http[address],message)
		append(messages_ip_internal[address],message)
		append(messages_sa[address],message)
		append(messages[address],message)
	
	} else {
		//*******************validating endpoint_config node************************************
		key = "endpoint_config"
		
		selected_node = plan.evaluate_attribute(rc, "cluster_config.0."+key)
		if types.type_of(selected_node) is not "null" {

		//*******************validating enable_http_port_access node*****************************		
			key = "enable_http_port_access"
			selected_node = plan.evaluate_attribute(rc, "cluster_config.0.endpoint_config.0."+key)
			
			if  selected_node {
				message = "Https port's access needs to be disabled for the dataproc services, please set value false to make it disabled"
				messages_http[address] = []
				append(messages_http[address],message)
				append(messages[address],message)
			}
		}

		//*******************validating gce_cluster_config node***************************
		key = "gce_cluster_config"
		selected_node = plan.evaluate_attribute(rc, "cluster_config.0."+key)
		
		if types.type_of(selected_node) is "null" {
			message = plan.to_string(address) + " does not have "+ key +" defined"
			messages_ip_internal[address] = []
			messages_sa[address] = []
			append(messages_ip_internal[address],message)
			append(messages_sa[address],message)
			append(messages[address],message)
		} else {

		//*******************validating internal_ip_only node*****************************
			key = "internal_ip_only"
			selected_node = plan.evaluate_attribute(rc, "cluster_config.0.gce_cluster_config.0."+key)
			
			if types.type_of(selected_node) is "null" {
				message = plan.to_string(address) + " does not have "+ key +" defined"
				messages_ip_internal[address] = []
				append(messages_ip_internal[address],message)
				append(messages[address],message)
			} else {				
				if not selected_node {					
					message = "The dataproc service will be accessible through internal ip only but it is disabled here, please set value true to make it enable"
					messages_ip_internal[address] = []
					append(messages_ip_internal[address],message)
					append(messages[address],message)
				} 
			}

		//*******************validating service_account node*****************************************
			key = "service_account"		

			selected_node = plan.evaluate_attribute(rc, "cluster_config.0.gce_cluster_config.0."+key)
			
			if types.type_of(selected_node) is "null" {					
				result = plan.evaluate_attribute(rc.change.after_unknown, "cluster_config.0.gce_cluster_config.0."+key)
				if result is not "null" and result is not true {
					message = "Dataproc service is not having any service account, please assign it"
					messages_sa[address] = []
					append(messages_sa[address],message)
					append(messages[address],message)
				}
			} else {				
				service_account_emailid = plan.evaluate_attribute(rc, "cluster_config.0.gce_cluster_config.0."+key)
				
				if types.type_of(service_account_emailid) is "null" {
					message = "Dataproc service is not having any service account, please assign it"
					messages_sa[address] = []
					append(messages_sa[address],message)
					append(messages[address],message)
				} else {
						arr_sa = strings.split(service_account_emailid,default_compute_sa)

						if length(arr_sa) > 1 {
								message = "The service account of dataproc service can not be a default compute service account, please change it"
								messages_sa[address] = []
								append(messages_sa[address],message)
								append(messages[address],message)
						} 
				}				
			}
		}
	}
}

GCP_DATAPROC_PRIV = rule {
	length(messages_ip_internal) is 0 
}

GCP_DATAPROC_HTTPS = rule {
	length(messages_http) is 0
}

GCP_DATAPROC_SA = rule {
	length(messages_sa) is 0 
}
# Main rule
print("length of internal: "+ plan.to_string(length(messages_ip_internal)))
print("length of http: "+ plan.to_string(length(messages_http)))
print("length of SA: "+ plan.to_string(length(messages_sa)))
print(messages)

main = rule { GCP_DATAPROC_HTTPS and GCP_DATAPROC_PRIV and GCP_DATAPROC_SA }
