# This policy uses the Sentinel tfplan/v2 import to require that
# all GCE dataproc instances following all the policies

# Note that the comparison is case-sensitive.

import "strings"
import "types"
import "tfplan-functions" as plan

# Get all GCE dataproc instances
allDPInstances = plan.find_resources("google_dataproc_cluster")

# Filter to GCE dataproc instances with violations
# Warnings will be printed for all violations since the last parameter is true

key = ""
messages = {}
default_compute_sa = "compute@developer.gserviceaccount.com"
selected_node = null

enable_http_port_access = true
internal_ip_only = false
service_account_validation = false

for allDPInstances as address, rc {
	messages[address] = []
	//*******************validating cluster_config node*****************************************
	key = "cluster_config"

	selected_node = plan.evaluate_attribute(rc, key)
	
	if types.type_of(selected_node) is "null" {
		message = plan.to_string(address) + " does not have "+ key +" defined"
		append(messages[address],message)
	
	} else {
		//*******************validating endpoint_config node************************************
		key = "endpoint_config"
		
		selected_node = plan.evaluate_attribute(rc, "cluster_config.0."+key)
		if types.type_of(selected_node) is "null" {
			enable_http_port_access = false
		} else {	
		//*******************validating enable_http_port_access node*****************************		
			key = "enable_http_port_access"
			selected_node = plan.evaluate_attribute(rc, "cluster_config.0.endpoint_config.0."+key)

			// if types.type_of(selected_node) is "null" {
			// 	message = plan.to_string(address) + " does not have "+ key +" defined"
			// 	append(messages[address],message)
			// } else {
				
				if  selected_node {
					enable_http_port_access = true;
					message = "Https port's access needs to be disabled for the dataproc services, please set value false to make it disabled"
					append(messages[address],message)
				} else {
					enable_http_port_access = false;
				}
			//}
		}

		//*******************validating gce_cluster_config node***************************
		key = "gce_cluster_config"
		selected_node = plan.evaluate_attribute(rc, "cluster_config.0."+key)
		
		if types.type_of(selected_node) is "null" {
			internal_ip_only = false
			service_account_validation = false
			message = plan.to_string(address) + " does not have "+ key +" defined"
			append(messages[address],message)
		} else {

		//*******************validating internal_ip_only node*****************************
			key = "internal_ip_only"
			selected_node = plan.evaluate_attribute(rc, "cluster_config.0.gce_cluster_config.0."+key)
			
			if types.type_of(selected_node) is "null" {
				internal_ip_only = false;
				message = plan.to_string(address) + " does not have "+ key +" defined"
				append(messages[address],message)
			} else {				
				if not selected_node {
					internal_ip_only = false;
					
					message = "The dataproc service will be accessible through internal ip only but it is disabled here, please set value true to make it enable"
					append(messages[address],message)
				} else {
					internal_ip_only = true;
				}
			}

		//*******************validating service_account node*****************************************
			key = "service_account"		

			selected_node = plan.evaluate_attribute(rc, "cluster_config.0.gce_cluster_config.0."+key)
			
			if types.type_of(selected_node) is "null" {		
				result = plan.evaluate_attribute(rc.change.after_unknown, "cluster_config.0.gce_cluster_config.0."+key)

				if result is "null" or result is true {
					service_account_validation = true;
				} else {
					service_account_validation = false;
					message = "Dataproc service is not having any service account, please assign it"
					append(messages[address],message)
				}
			} else {				
				service_account_emailid = plan.evaluate_attribute(rc, "cluster_config.0.gce_cluster_config.0."+key)
				
				if types.type_of(service_account_emailid) is "null" {
					service_account_validation = false;
					message = "Dataproc service is not having any service account, please assign it"
					append(messages[address],message)
				} else {
						arr_sa = strings.split(service_account_emailid,default_compute_sa)

						if length(arr_sa) > 1 {
								service_account_validation = false;
								message = "The service account of dataproc service can not be a default compute service account, please change it"
								append(messages[address],message)
						} else {
								service_account_validation = true;
						}
				}				
			}
		}
	}
}

GCP_DATAPROC_PRIV = rule {
	internal_ip_only
}

GCP_DATAPROC_HTTPS = rule {
	not enable_http_port_access
}

GCP_DATAPROC_SA = rule {
	service_account_validation
}
# Main rule
print(messages)

main = rule { GCP_DATAPROC_HTTPS and GCP_DATAPROC_PRIV and GCP_DATAPROC_SA }
